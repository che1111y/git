C251 COMPILER V5.60.0,  motor                                                              15/05/22  11:18:40  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE motor
OBJECT MODULE PLACED IN .\Out_File\motor.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\CODE\motor.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\Libra
                    -ries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src) D
                    -EBUG PRINT(.\Out_File\motor.lst) OBJECT(.\Out_File\motor.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          uint16 PWM_LeftOut,PWM_RightOut,Now_speed = 0,PWM_Out=0;
    4          float Target_Speed_L = 0 ,Target_Speed_R = 0 ;
    5          uint16 Left_Duty = 0,Right_Duty = 0;
    6          float L_Speed_KP = 20.0,//150//45//30
    7                    L_Speed_KI = 1.8,//6//1.8
    8                    L_Speed_KD = 0;
    9          float R_Speed_KP = 20.0,//150//45//30
   10                    R_Speed_KI = 1.8,//6//1.8
   11                    R_Speed_KD = 0;
   12          
   13          
   14          /**
   15          *  @name   : motor_init
   16          *  @author : chelly
   17          *  @tips   : 电机初始化
   18          */
   19          void motor_init()
   20          {
   21   1        pwm_init(PWMA_CH1P_P60, 10000, 0);
   22   1        pwm_init(PWMA_CH2P_P62, 10000, 0);
   23   1        pwm_init(PWMA_CH3P_P64, 10000, 0);
   24   1        pwm_init(PWMA_CH4P_P66, 10000, 0);
   25   1      }
   26          
   27          /**
   28          *  @name   : PWM_Output
   29          *  @author : chelly
   30          *  @tips   : 电机输出
   31          */
   32          void PWM_Output(int R_Duty,int L_Duty)
   33          {
   34   1          if(R_Duty >= 0)
   35   1          {
   36   2              R_Duty = (R_Duty>4500? 4500:R_Duty);
   37   2              pwm_duty(PWMA_CH1P_P60, 0);
   38   2              pwm_duty(PWMA_CH2P_P62, R_Duty);
   39   2          }
   40   1          else
   41   1          {
   42   2              R_Duty = (R_Duty<-4500? -4500:R_Duty);
   43   2              pwm_duty(PWMA_CH1P_P60, -R_Duty);                                                       
   44   2              pwm_duty(PWMA_CH2P_P62, 0);                                             
   45   2          }
   46   1          if(L_Duty >= 0)
   47   1          {
   48   2              L_Duty = (L_Duty>4500? 4500:L_Duty);
   49   2              pwm_duty(PWMA_CH3P_P64, 0);                                             
   50   2              pwm_duty(PWMA_CH4P_P66, L_Duty);                                                        
   51   2          }
   52   1          else
   53   1          {
   54   2              Left_Duty = (L_Duty<-4500? -4500:L_Duty);
   55   2              pwm_duty(PWMA_CH3P_P64, -L_Duty);                                                       
   56   2              pwm_duty(PWMA_CH4P_P66, 0);                                     
   57   2          }
C251 COMPILER V5.60.0,  motor                                                              15/05/22  11:18:40  PAGE 2   

   58   1              
   59   1      }
   60          
   61          /**
   62          *  @name   : PWM_Control
   63          *  @tips   : 电机控制
   64          */
   65          void PWM_Control(void)
   66          {
   67   1            if(sc_flag != 1||sc_flag != 2||sc_flag != 3
   68   1            ||sc_flag != 5||sc_flag != 6||sc_flag != 7)
   69   1            {
   70   2              if(df<40&&df>-40)
   71   2              {
   72   3                  Target_Speed_L =210;//30
   73   3                  Target_Speed_R =210;//30
   74   3              }
   75   2      //        else if(df>-60&&df<-30)
   76   2      //        {
   77   2      //            Target_Speed =70;//30
   78   2      //        }
   79   2      //        else if(df<60&&df>30)
   80   2      //        {
   81   2      //            Target_Speed =70;//30
   82   2      //        }
   83   2              else 
   84   2              {
   85   3                  Target_Speed_L =190;//30
   86   3                  Target_Speed_R =190;//30
   87   3              }
   88   2           }
   89   1      //    if(cbh<10 && cbh>-10)
   90   1      //    {
   91   1      //        Target_Speed = 45;//55
   92   1      //    }
   93   1      //    else if((cbh>10 && cbh<30)||(cbh<-10 && cbh>-30))
   94   1      //    {
   95   1      //        Target_Speed = 30;//40
   96   1      //    }
   97   1      //    else
   98   1      //    {
   99   1      //        Target_Speed =200;//30
  100   1      //    }
  101   1      //  if(ad_value3<10&&ad_value2<10)
  102   1      //  {
  103   1      //     pwm_duty(PWMA_CH1P_P60, 0);
  104   1      //     pwm_duty(PWMA_CH2P_P62, 0);
  105   1      //     pwm_duty(PWMA_CH3P_P64, 0);                                              
  106   1      //     pwm_duty(PWMA_CH4P_P66, 0);
  107   1      //  }
  108   1      //  else
  109   1      //  { 
  110   1      //    PWM_Out = PID_Increase(Speed_KP,Speed_KI,Speed_KD, encoder_left, Target_Speed);
  111   1          Left_Duty = PID_LIncrease(L_Speed_KP,L_Speed_KI,L_Speed_KD, encoder_left, Target_Speed_L);
  112   1          Right_Duty = PID_RIncrease(R_Speed_KP,R_Speed_KI,R_Speed_KD, encoder_right, Target_Speed_R);
  113   1      //  }
  114   1      }
  115          
  116            


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       410     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
C251 COMPILER V5.60.0,  motor                                                              15/05/22  11:18:40  PAGE 3   

  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        44     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        88     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
